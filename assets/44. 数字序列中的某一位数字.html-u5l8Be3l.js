const n=JSON.parse(`{"key":"v-d3caa1f8","path":"/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95%E9%A2%98/jzoffer/44.%20%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%80%E4%BD%8D%E6%95%B0%E5%AD%97.html","title":"44. 数字序列中的某一位数字","lang":"zh-CN","frontmatter":{"description":"44. 数字序列中的某一位数字 题目描述 数字以 0123456789101112131415... 的格式序列化到一个字符串中，求这个字符串的第 index 位。 解题思路 public int getDigitAtIndex(int index) { if (index &lt; 0) return -1; int place = 1; // 1 表示个位，2 表示 十位... while (true) { int amount = getAmountOfPlace(place); int totalAmount = amount * place; if (index &lt; totalAmount) return getDigitAtIndex(index, place); index -= totalAmount; place++; } } /** * place 位数的数字组成的字符串长度 * 10, 90, 900, ... */ private int getAmountOfPlace(int place) { if (place == 1) return 10; return (int) Math.pow(10, place - 1) * 9; } /** * place 位数的起始数字 * 0, 10, 100, ... */ private int getBeginNumberOfPlace(int place) { if (place == 1) return 0; return (int) Math.pow(10, place - 1); } /** * 在 place 位数组成的字符串中，第 index 个数 */ private int getDigitAtIndex(int index, int place) { int beginNumber = getBeginNumberOfPlace(place); int shiftNumber = index / place; String number = (beginNumber + shiftNumber) + \\"\\"; int count = index % place; return number.charAt(count) - '0'; }","head":[["meta",{"property":"og:url","content":"https://notes-page-mu.vercel.app/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95%E9%A2%98/jzoffer/44.%20%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%80%E4%BD%8D%E6%95%B0%E5%AD%97.html"}],["meta",{"property":"og:site_name","content":"我的笔记"}],["meta",{"property":"og:title","content":"44. 数字序列中的某一位数字"}],["meta",{"property":"og:description","content":"44. 数字序列中的某一位数字 题目描述 数字以 0123456789101112131415... 的格式序列化到一个字符串中，求这个字符串的第 index 位。 解题思路 public int getDigitAtIndex(int index) { if (index &lt; 0) return -1; int place = 1; // 1 表示个位，2 表示 十位... while (true) { int amount = getAmountOfPlace(place); int totalAmount = amount * place; if (index &lt; totalAmount) return getDigitAtIndex(index, place); index -= totalAmount; place++; } } /** * place 位数的数字组成的字符串长度 * 10, 90, 900, ... */ private int getAmountOfPlace(int place) { if (place == 1) return 10; return (int) Math.pow(10, place - 1) * 9; } /** * place 位数的起始数字 * 0, 10, 100, ... */ private int getBeginNumberOfPlace(int place) { if (place == 1) return 0; return (int) Math.pow(10, place - 1); } /** * 在 place 位数组成的字符串中，第 index 个数 */ private int getDigitAtIndex(int index, int place) { int beginNumber = getBeginNumberOfPlace(place); int shiftNumber = index / place; String number = (beginNumber + shiftNumber) + \\"\\"; int count = index % place; return number.charAt(count) - '0'; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T15:11:26.000Z"}],["meta",{"property":"article:author","content":"zihan"}],["meta",{"property":"article:modified_time","content":"2024-06-10T15:11:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"44. 数字序列中的某一位数字\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-10T15:11:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zihan\\",\\"url\\":\\"https://github.com/zilan920/notes\\"}]}"]]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]}],"git":{"createdTime":1718032286000,"updatedTime":1718032286000,"contributors":[{"name":"zilan920","email":"zilan920@126.com","commits":1}]},"readingTime":{"minutes":0.68,"words":205},"filePathRelative":"技术/算法题/jzoffer/44. 数字序列中的某一位数字.md","localizedDate":"2024年6月10日","excerpt":"<h1> 44. 数字序列中的某一位数字</h1>\\n<h2> 题目描述</h2>\\n<p>数字以 0123456789101112131415... 的格式序列化到一个字符串中，求这个字符串的第 index 位。</p>\\n<h2> 解题思路</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getDigitAtIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> place <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 1 表示个位，2 表示 十位...</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> amount <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getAmountOfPlace</span><span class=\\"token punctuation\\">(</span>place<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> totalAmount <span class=\\"token operator\\">=</span> amount <span class=\\"token operator\\">*</span> place<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&lt;</span> totalAmount<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getDigitAtIndex</span><span class=\\"token punctuation\\">(</span>index<span class=\\"token punctuation\\">,</span> place<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        index <span class=\\"token operator\\">-=</span> totalAmount<span class=\\"token punctuation\\">;</span>\\n        place<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * place 位数的数字组成的字符串长度\\n * 10, 90, 900, ...\\n */</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getAmountOfPlace</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> place<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>place <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">Math</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pow</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> place <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">9</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * place 位数的起始数字\\n * 0, 10, 100, ...\\n */</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getBeginNumberOfPlace</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> place<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>place <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">Math</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pow</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> place <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * 在 place 位数组成的字符串中，第 index 个数\\n */</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getDigitAtIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> place<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> beginNumber <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getBeginNumberOfPlace</span><span class=\\"token punctuation\\">(</span>place<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> shiftNumber <span class=\\"token operator\\">=</span> index <span class=\\"token operator\\">/</span> place<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">String</span> number <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>beginNumber <span class=\\"token operator\\">+</span> shiftNumber<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> count <span class=\\"token operator\\">=</span> index <span class=\\"token operator\\">%</span> place<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> number<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>count<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token char\\">'0'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
