const e=JSON.parse(`{"key":"v-145baff6","path":"/%E6%8A%80%E6%9C%AF/code-collect.html","title":"code collection","lang":"zh-CN","frontmatter":{"description":"code collection min heap import ( \\"container/heap\\" \\"fmt\\" ) // An IntHeap is a min-heap of ints. type IntHeap []int func (h IntHeap) Len() int { return len(h) } func (h IntHeap) Less(i, j int) bool { return h[i] &lt; h[j] } func (h IntHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] } func (h *IntHeap) Push(x interface{}) { // Push and Pop use pointer receivers because they modify the slice's length, // not just its contents. *h = append(*h, x.(int)) } func (h *IntHeap) Pop() interface{} { old := *h n := len(old) x := old[n-1] *h = old[0 : n-1] return x } // This example inserts several ints into an IntHeap, checks the minimum, // and removes them in order of priority. func main() { h := &amp;IntHeap{2, 1, 5} heap.Init(h) heap.Push(h, 3) fmt.Printf(\\"minimum: %d\\\\n\\", (*h)[0]) // minimum: 1 for h.Len() &gt; 0 { fmt.Printf(\\"%d \\", heap.Pop(h)) // 1 2 3 5 } }","head":[["meta",{"property":"og:url","content":"https://notes-page-mu.vercel.app/%E6%8A%80%E6%9C%AF/code-collect.html"}],["meta",{"property":"og:site_name","content":"我的笔记"}],["meta",{"property":"og:title","content":"code collection"}],["meta",{"property":"og:description","content":"code collection min heap import ( \\"container/heap\\" \\"fmt\\" ) // An IntHeap is a min-heap of ints. type IntHeap []int func (h IntHeap) Len() int { return len(h) } func (h IntHeap) Less(i, j int) bool { return h[i] &lt; h[j] } func (h IntHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] } func (h *IntHeap) Push(x interface{}) { // Push and Pop use pointer receivers because they modify the slice's length, // not just its contents. *h = append(*h, x.(int)) } func (h *IntHeap) Pop() interface{} { old := *h n := len(old) x := old[n-1] *h = old[0 : n-1] return x } // This example inserts several ints into an IntHeap, checks the minimum, // and removes them in order of priority. func main() { h := &amp;IntHeap{2, 1, 5} heap.Init(h) heap.Push(h, 3) fmt.Printf(\\"minimum: %d\\\\n\\", (*h)[0]) // minimum: 1 for h.Len() &gt; 0 { fmt.Printf(\\"%d \\", heap.Pop(h)) // 1 2 3 5 } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T15:11:26.000Z"}],["meta",{"property":"article:author","content":"zihan"}],["meta",{"property":"article:modified_time","content":"2024-06-10T15:11:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"code collection\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-10T15:11:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zihan\\",\\"url\\":\\"https://github.com/zilan920/notes\\"}]}"]]},"headers":[],"git":{"createdTime":1718032286000,"updatedTime":1718032286000,"contributors":[{"name":"zilan920","email":"zilan920@126.com","commits":1}]},"readingTime":{"minutes":1.06,"words":317},"filePathRelative":"技术/code-collect.md","localizedDate":"2024年6月10日","excerpt":"<h1> code collection</h1>\\n<ul>\\n<li>min heap</li>\\n</ul>\\n<div class=\\"language-golang line-numbers-mode\\" data-ext=\\"golang\\"><pre class=\\"language-golang\\"><code>import (\\n    \\"container/heap\\"\\n    \\"fmt\\"\\n)\\n\\n// An IntHeap is a min-heap of ints.\\ntype IntHeap []int\\n\\nfunc (h IntHeap) Len() int           { return len(h) }\\nfunc (h IntHeap) Less(i, j int) bool { return h[i] &lt; h[j] }\\nfunc (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\\n\\nfunc (h *IntHeap) Push(x interface{}) {\\n    // Push and Pop use pointer receivers because they modify the slice's length,\\n    // not just its contents.\\n    *h = append(*h, x.(int))\\n}\\n\\nfunc (h *IntHeap) Pop() interface{} {\\n    old := *h\\n    n := len(old)\\n    x := old[n-1]\\n    *h = old[0 : n-1]\\n    return x\\n}\\n\\n// This example inserts several ints into an IntHeap, checks the minimum,\\n// and removes them in order of priority.\\nfunc main() {\\n    h := &amp;IntHeap{2, 1, 5}\\n    heap.Init(h)\\n    heap.Push(h, 3)\\n    fmt.Printf(\\"minimum: %d\\\\n\\", (*h)[0]) // minimum: 1\\n    for h.Len() &gt; 0 {\\n        fmt.Printf(\\"%d \\", heap.Pop(h)) // 1 2 3 5\\n    }\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
