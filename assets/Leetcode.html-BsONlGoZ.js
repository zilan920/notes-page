const e=JSON.parse('{"key":"v-b9d4bff0","path":"/contents/Leetcode.html","title":"Leetcode","lang":"zh-CN","frontmatter":{"article":true,"title":"Leetcode","icon":"read","description":"思路 双指针与链表 合并有序链表 拉链法 多个链表合并：优先队列 拆分链表 直接使用两个节点遍历，按条件分别生成两个链表，最后合并起来，注意中途要拆分原有的关联 合并k个有序链表 类似合并2个有序链表，但这里使用到了优先级队列，快速找到最小的节点。优先级队列属于单独的数据结构，需要了解 单链表的倒数第 k 个节点 两个指针，第一个先走k步，再将两个指针一起走，最后第一个指针到达尾部时，第二个刚好走了n-k步 类似的还有删除倒数第k个节点 链表中点 直接使用快慢指针 判断是否包含环 使用快慢指针，如果两个指针相交则表示包含环，相交后任意一个节点回到头，然后相同速度往前走，再次相交则为相交的起点。 两个链表是否相交 两个指针分别依次走两个链表，最后看是否相交。 类似的，也可以将两个链表首位相连，判断是否存在环 递归反转","head":[["meta",{"property":"og:url","content":"https://notes-page-mu.vercel.app/contents/Leetcode.html"}],["meta",{"property":"og:site_name","content":"我的笔记"}],["meta",{"property":"og:title","content":"Leetcode"}],["meta",{"property":"og:description","content":"思路 双指针与链表 合并有序链表 拉链法 多个链表合并：优先队列 拆分链表 直接使用两个节点遍历，按条件分别生成两个链表，最后合并起来，注意中途要拆分原有的关联 合并k个有序链表 类似合并2个有序链表，但这里使用到了优先级队列，快速找到最小的节点。优先级队列属于单独的数据结构，需要了解 单链表的倒数第 k 个节点 两个指针，第一个先走k步，再将两个指针一起走，最后第一个指针到达尾部时，第二个刚好走了n-k步 类似的还有删除倒数第k个节点 链表中点 直接使用快慢指针 判断是否包含环 使用快慢指针，如果两个指针相交则表示包含环，相交后任意一个节点回到头，然后相同速度往前走，再次相交则为相交的起点。 两个链表是否相交 两个指针分别依次走两个链表，最后看是否相交。 类似的，也可以将两个链表首位相连，判断是否存在环 递归反转"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-04T02:50:16.000Z"}],["meta",{"property":"article:author","content":"zihan"}],["meta",{"property":"article:modified_time","content":"2024-02-04T02:50:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Leetcode\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-04T02:50:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zihan\\",\\"url\\":\\"https://github.com/zilan920/notes\\"}]}"]]},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"核心思路","slug":"核心思路","link":"#核心思路","children":[{"level":3,"title":"基础数据结构","slug":"基础数据结构","link":"#基础数据结构","children":[]},{"level":3,"title":"进阶数据结构","slug":"进阶数据结构","link":"#进阶数据结构","children":[]},{"level":3,"title":"暴力算法","slug":"暴力算法","link":"#暴力算法","children":[]},{"level":3,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]}]}],"git":{"createdTime":1702454816000,"updatedTime":1707015016000,"contributors":[{"name":"zihan.fang","email":"zihan.fang@bitdeer.com","commits":4},{"name":"zilan920","email":"zilan920@126.com","commits":2}]},"readingTime":{"minutes":5.44,"words":1632},"filePathRelative":"contents/Leetcode.md","localizedDate":"2023年12月13日","excerpt":"<h2> 思路</h2>\\n<ul>\\n<li>双指针与链表\\n<ul>\\n<li>\\n<p>合并有序链表</p>\\n<ul>\\n<li>拉链法</li>\\n<li>多个链表合并：优先队列</li>\\n</ul>\\n</li>\\n<li>\\n<p>拆分链表</p>\\n<pre><code>直接使用两个节点遍历，按条件分别生成两个链表，最后合并起来，注意中途要拆分原有的关联\\n</code></pre>\\n</li>\\n<li>\\n<p>合并k个有序链表</p>\\n<pre><code>类似合并2个有序链表，但这里使用到了优先级队列，快速找到最小的节点。优先级队列属于单独的数据结构，需要了解\\n</code></pre>\\n</li>\\n<li>\\n<p>单链表的倒数第 k 个节点</p>\\n<pre><code>两个指针，第一个先走k步，再将两个指针一起走，最后第一个指针到达尾部时，第二个刚好走了n-k步\\n类似的还有删除倒数第k个节点\\n</code></pre>\\n</li>\\n<li>\\n<p>链表中点</p>\\n<pre><code>直接使用快慢指针\\n</code></pre>\\n</li>\\n<li>\\n<p>判断是否包含环</p>\\n<pre><code>使用快慢指针，如果两个指针相交则表示包含环，相交后任意一个节点回到头，然后相同速度往前走，再次相交则为相交的起点。\\n</code></pre>\\n</li>\\n<li>\\n<p>两个链表是否相交</p>\\n<pre><code>两个指针分别依次走两个链表，最后看是否相交。\\n类似的，也可以将两个链表首位相连，判断是否存在环\\n</code></pre>\\n</li>\\n<li>\\n<p>递归反转</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
