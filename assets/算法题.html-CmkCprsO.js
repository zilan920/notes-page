import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-cEsSLNcl.js";const i={},u=n("h2",{id:"数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构","aria-hidden":"true"},"#"),s(" 数据结构")],-1),r=n("h3",{id:"数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数组","aria-hidden":"true"},"#"),s(" 数组")],-1),k={href:"https://leetcode.cn/problems/remove-element/description/",target:"_blank",rel:"noopener noreferrer"},d=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    slow<span class="token punctuation">,</span> fast <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">for</span> fast <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
            slow <span class="token operator">++</span>
        <span class="token punctuation">}</span>
         fast <span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v={href:"https://leetcode.cn/problems/move-zeroes/description",target:"_blank",rel:"noopener noreferrer"},m=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    slow<span class="token punctuation">,</span> fast <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">for</span> fast <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
            slow <span class="token operator">++</span>
        <span class="token punctuation">}</span> 
        fast<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> slow <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        slow <span class="token operator">++</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b={href:"https://leetcode.cn/problems/merge-intervals/description",target:"_blank",rel:"noopener noreferrer"},h=n("h3",{id:"链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表","aria-hidden":"true"},"#"),s(" 链表")],-1),f={href:"https://leetcode.cn/problems/reverse-linked-list/description",target:"_blank",rel:"noopener noreferrer"},g=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>
    <span class="token keyword">var</span> pre <span class="token operator">*</span>ListNode
    cur <span class="token operator">:=</span> head
    <span class="token keyword">for</span> cur <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        next <span class="token operator">:=</span> cur<span class="token punctuation">.</span>Next
        <span class="token comment">// point to pre</span>
        cur<span class="token punctuation">.</span>Next <span class="token operator">=</span> pre
        <span class="token comment">// pre&amp;cur to next</span>
        pre <span class="token operator">=</span> cur
        cur <span class="token operator">=</span> next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_={href:"https://leetcode.cn/problems/merge-two-sorted-lists/description",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1 <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> list2 <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>
    head <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>
        Val<span class="token punctuation">:</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
        Next<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    p <span class="token operator">:=</span> head
    <span class="token keyword">for</span> list1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> list2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> list1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> list2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> list1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list2
                p <span class="token operator">=</span> list2
                list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>Next
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> list2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list1
                p <span class="token operator">=</span> list1
                list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>Next
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> list1<span class="token punctuation">.</span>Val <span class="token operator">&gt;</span> list2<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list2
            p <span class="token operator">=</span> list2
            list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>Next
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> list1<span class="token punctuation">.</span>Val <span class="token operator">&lt;=</span> list2<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list1
            p <span class="token operator">=</span> list1
            list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>Next
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> head<span class="token punctuation">.</span>Next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y={href:"https://leetcode.cn/problems/merge-k-sorted-lists/description",target:"_blank",rel:"noopener noreferrer"},x={href:"https://leetcode.cn/problems/add-two-numbers/description",target:"_blank",rel:"noopener noreferrer"},S=n("h3",{id:"哈希表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#哈希表","aria-hidden":"true"},"#"),s(" 哈希表")],-1),j=n("h3",{id:"二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二叉树","aria-hidden":"true"},"#"),s(" 二叉树")],-1),N={href:"https://leetcode.cn/problems/invert-binary-tree/description",target:"_blank",rel:"noopener noreferrer"},L={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal/description",target:"_blank",rel:"noopener noreferrer"},M={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/description",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.cn/problems/validate-binary-search-tree/description",target:"_blank",rel:"noopener noreferrer"},I={href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/description",target:"_blank",rel:"noopener noreferrer"},P=n("h3",{id:"字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字符串","aria-hidden":"true"},"#"),s(" 字符串")],-1),q=n("h3",{id:"栈-堆与队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#栈-堆与队列","aria-hidden":"true"},"#"),s(" 栈，堆与队列")],-1),T={href:"https://leetcode.cn/problems/valid-parentheses/description",target:"_blank",rel:"noopener noreferrer"},B={href:"https://leetcode.cn/problems/min-stack/description",target:"_blank",rel:"noopener noreferrer"},C=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        Min <span class="token builtin">int</span>
        Val <span class="token builtin">int</span>
    <span class="token punctuation">}</span>

<span class="token keyword">type</span> MinStack <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Stack <span class="token punctuation">[</span><span class="token punctuation">]</span>Node
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> MinStack <span class="token punctuation">{</span>
	stack <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Node<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> MinStack<span class="token punctuation">{</span>
		Stack<span class="token punctuation">:</span> stack<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MinStack<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> val
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		m <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Min<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	this<span class="token punctuation">.</span>Stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">,</span> Node<span class="token punctuation">{</span>
		Min<span class="token punctuation">:</span> m<span class="token punctuation">,</span>
		Val<span class="token punctuation">:</span> val<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MinStack<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	this<span class="token punctuation">.</span>Stack <span class="token operator">=</span> this<span class="token punctuation">.</span>Stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MinStack<span class="token punctuation">)</span> <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> this<span class="token punctuation">.</span>Stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Val
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MinStack<span class="token punctuation">)</span> <span class="token function">GetMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> this<span class="token punctuation">.</span>Stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Min
<span class="token punctuation">}</span>

<span class="token comment">/**
 * Your MinStack object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Push(val);
 * obj.Pop();
 * param_3 := obj.Top();
 * param_4 := obj.GetMin();
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array/description",target:"_blank",rel:"noopener noreferrer"},F=p('<h3 id="数据结构设计" tabindex="-1"><a class="header-anchor" href="#数据结构设计" aria-hidden="true">#</a> 数据结构设计</h3><ul><li>LRU</li></ul><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><h3 id="贪心法" tabindex="-1"><a class="header-anchor" href="#贪心法" aria-hidden="true">#</a> 贪心法</h3><h3 id="回溯法" tabindex="-1"><a class="header-anchor" href="#回溯法" aria-hidden="true">#</a> 回溯法</h3>',5),G={href:"https://leetcode.cn/problems/permutations/description",target:"_blank",rel:"noopener noreferrer"},K=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> res <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token function">permute</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    list <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">findPermute</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">findPermute</span><span class="token punctuation">(</span>list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> length <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">==</span> length <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> list<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        resNums <span class="token operator">:=</span> slices<span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// resNums := append([]int{},  nums[0:k]... )</span>
        <span class="token comment">// resNums = append(resNums, nums[k+1:]...)</span>
        <span class="token function">findPermute</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span> resNums<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),O={href:"https://leetcode.cn/problems/target-sum/description/",target:"_blank",rel:"noopener noreferrer"},W=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> backtrack <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    backtrack <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> sum <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> sum <span class="token operator">==</span> target <span class="token punctuation">{</span>
                count<span class="token operator">++</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token operator">+</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token operator">-</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dfs" tabindex="-1"><a class="header-anchor" href="#dfs" aria-hidden="true">#</a> DFS</h3>`,2),z={href:"https://leetcode.cn/problems/number-of-islands/description/",target:"_blank",rel:"noopener noreferrer"},A=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Flood fill</span>
<span class="token keyword">func</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>grid <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	res <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span> <span class="token punctuation">{</span>
				res<span class="token operator">++</span>
				<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;0&#39;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span>
	<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
	<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
	<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bfs" tabindex="-1"><a class="header-anchor" href="#bfs" aria-hidden="true">#</a> BFS</h3><h3 id="动态规划法" tabindex="-1"><a class="header-anchor" href="#动态规划法" aria-hidden="true">#</a> 动态规划法</h3>`,3),D={href:"https://leetcode.cn/problems/maximum-subarray/description",target:"_blank",rel:"noopener noreferrer"},R=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	preSum <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
	preSum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>preSum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ans

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),U={href:"https://leetcode.cn/problems/climbing-stairs/description",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://leetcode.cn/problems/coin-change/description",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://leetcode.cn/problems/longest-increasing-subsequence/description",target:"_blank",rel:"noopener noreferrer"},H=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    lis <span class="token operator">:=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> j<span class="token operator">:=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        lis <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>lis<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> lis
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),J={href:"https://leetcode.cn/problems/target-sum/description/",target:"_blank",rel:"noopener noreferrer"},Q=p("<p>0-1背包：有n个物品，每个物品的体积为W[i]，价值为v[i]，每个物品最多选一个，求体积不超过capacity时的最大价值和</p><p>回溯三问：</p><ul><li><p>当前操作：枚举第i个物品时选或者不选</p><ul><li>选：剩余容量减少w[i]</li><li>不选：剩余容量不变</li></ul></li><li><p>子问题：在剩余容量为c时，从前i个物品中得到的最大价值和</p></li><li><p>下一个子问题：</p><ul><li>不选： 在剩余容量为c时，从前i-1个物品中得到的最大价值和</li><li>选：从剩余容量为c-w[i]时，从前i-1个物品中得到的最大价值和</li></ul></li></ul><p><code>dfs(i, c) = max(dfs(i-1, c), dfs(i-1, c-w[i]) + v[i])</code></p><p>常见变形</p>",5),X=n("li",null,[n("p",null,"至多装capacity，求方案数/最大价值和")],-1),$=n("li",null,[n("p",null,"恰好装capacity，求方案数/最大/最小价值和")],-1),nn=n("li",null,[n("p",null,"至少装capacity，求方案数/最小价值和")],-1),sn={href:"https://leetcode.cn/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"},an=p(`<h3 id="二分搜索" tabindex="-1"><a class="header-anchor" href="#二分搜索" aria-hidden="true">#</a> 二分搜索</h3><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h3><ul><li>快速排序</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> low <span class="token operator">&lt;</span> high <span class="token punctuation">{</span>
		pivotIndex <span class="token operator">:=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>

		<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	pivot <span class="token operator">:=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span>
	i <span class="token operator">:=</span> low <span class="token operator">-</span> <span class="token number">1</span>

	<span class="token keyword">for</span> j <span class="token operator">:=</span> low<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> high<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot <span class="token punctuation">{</span>
			i<span class="token operator">++</span>
			arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
	<span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="算法技巧" tabindex="-1"><a class="header-anchor" href="#算法技巧" aria-hidden="true">#</a> 算法技巧</h2><h3 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h3>`,6),tn={href:"https://leetcode.cn/problems/container-with-most-water/description",target:"_blank",rel:"noopener noreferrer"},pn=n("h3",{id:"滑动窗口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#滑动窗口","aria-hidden":"true"},"#"),s(" 滑动窗口")],-1),en={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description",target:"_blank",rel:"noopener noreferrer"},on=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    record <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    res <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> right <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c <span class="token operator">:=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> record<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            record<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            record<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
        right <span class="token operator">++</span>
        <span class="token keyword">for</span> left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            record<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span>
            left <span class="token operator">++</span> 
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="前缀和与差分数组" tabindex="-1"><a class="header-anchor" href="#前缀和与差分数组" aria-hidden="true">#</a> 前缀和与差分数组</h3>`,2),cn={href:"https://leetcode.cn/problems/subarray-sum-equals-k/description",target:"_blank",rel:"noopener noreferrer"};function ln(un,rn){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("ul",null,[n("li",null,[n("a",k,[s("移除元素"),t(a)])])]),d,n("ul",null,[n("li",null,[n("a",v,[s("移动零"),t(a)])])]),m,n("ul",null,[n("li",null,[n("a",b,[s("合并区间"),t(a)])])]),h,n("ul",null,[n("li",null,[n("a",f,[s("反转链表"),t(a)])])]),g,n("ul",null,[n("li",null,[n("a",_,[s("合并两个有序链表"),t(a)])])]),w,n("ul",null,[n("li",null,[n("p",null,[n("a",y,[s("合并K个升序链表"),t(a)])])]),n("li",null,[n("p",null,[n("a",x,[s("两数相加"),t(a)])])])]),S,j,n("ul",null,[n("li",null,[n("p",null,[n("a",N,[s("翻转二叉树"),t(a)])])]),n("li",null,[n("p",null,[n("a",L,[s("二叉树的中序遍历"),t(a)])])]),n("li",null,[n("p",null,[n("a",M,[s("二叉树的层序遍历"),t(a)])])]),n("li",null,[n("p",null,[n("a",V,[s("验证二叉搜索树"),t(a)])])]),n("li",null,[n("p",null,[n("a",I,[s("二叉树展开为链表"),t(a)])])])]),P,q,n("ul",null,[n("li",null,[n("p",null,[n("a",T,[s("有效的括号"),t(a)])])]),n("li",null,[n("p",null,[n("a",B,[s("最小栈"),t(a)])])])]),C,n("ul",null,[n("li",null,[n("a",E,[s("数组中第k大个元素"),t(a)])])]),F,n("ul",null,[n("li",null,[n("a",G,[s("全排列"),t(a)])])]),K,n("ul",null,[n("li",null,[n("a",O,[s("目标和"),t(a)]),s(" (回溯法)")])]),W,n("ul",null,[n("li",null,[n("a",z,[s("岛屿数量"),t(a)])])]),A,n("ul",null,[n("li",null,[n("a",D,[s("最大子数组和"),t(a)])])]),R,n("ul",null,[n("li",null,[n("p",null,[n("a",U,[s("爬楼梯"),t(a)])])]),n("li",null,[n("p",null,[n("a",Y,[s("换零钱"),t(a)])])]),n("li",null,[n("p",null,[n("a",Z,[s("最长递增子序列"),t(a)])])])]),H,n("ul",null,[n("li",null,[n("a",J,[s("目标和"),t(a)]),s(" (转化为动态规划法：0-1背包问题)")])]),Q,n("ul",null,[X,$,nn,n("li",null,[n("p",null,[n("a",sn,[s("零钱兑换"),t(a)])])])]),an,n("ul",null,[n("li",null,[n("a",tn,[s("盛最多水的容器"),t(a)])])]),pn,n("ul",null,[n("li",null,[n("a",en,[s("无重复字符的最长子串"),t(a)])])]),on,n("ul",null,[n("li",null,[n("a",cn,[s("和为 K 的子数组"),t(a)])])])])}const vn=e(i,[["render",ln],["__file","算法题.html.vue"]]);export{vn as default};
