import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as l,c as i,a as n,b as s,d as e,e as t}from"./app-xb7ImKSJ.js";const c={},r=n("h3",{id:"数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据结构","aria-hidden":"true"},"#"),s(" 数据结构")],-1),u=n("h4",{id:"数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数组","aria-hidden":"true"},"#"),s(" 数组")],-1),d={href:"https://leetcode.cn/problems/remove-element/description/",target:"_blank",rel:"noopener noreferrer"},k=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    slow<span class="token punctuation">,</span> fast <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">for</span> fast <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
            slow <span class="token operator">++</span>
        <span class="token punctuation">}</span>
         fast <span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v={href:"https://leetcode.cn/problems/move-zeroes/description",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    slow<span class="token punctuation">,</span> fast <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">for</span> fast <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
            slow <span class="token operator">++</span>
        <span class="token punctuation">}</span> 
        fast<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> slow <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        slow <span class="token operator">++</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b={href:"https://leetcode.cn/problems/merge-intervals/description",target:"_blank",rel:"noopener noreferrer"},m=n("h4",{id:"链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表","aria-hidden":"true"},"#"),s(" 链表")],-1),f={href:"https://leetcode.cn/problems/reverse-linked-list/description",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>
    <span class="token keyword">var</span> pre <span class="token operator">*</span>ListNode
    cur <span class="token operator">:=</span> head
    <span class="token keyword">for</span> cur <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        next <span class="token operator">:=</span> cur<span class="token punctuation">.</span>Next
        <span class="token comment">// point to pre</span>
        cur<span class="token punctuation">.</span>Next <span class="token operator">=</span> pre
        <span class="token comment">// pre&amp;cur to next</span>
        pre <span class="token operator">=</span> cur
        cur <span class="token operator">=</span> next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g={href:"https://leetcode.cn/problems/merge-two-sorted-lists/description",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>list1 <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> list2 <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>
	head <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>
		Val<span class="token punctuation">:</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
		Next<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	p <span class="token operator">:=</span> head
	<span class="token keyword">for</span> list1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> list2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> list1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> list2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> list1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list2
				p <span class="token operator">=</span> list2
				list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>Next
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> list2 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list1
				p <span class="token operator">=</span> list1
				list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>Next
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> list1<span class="token punctuation">.</span>Val <span class="token operator">&gt;</span> list2<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>
			p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list2
			p <span class="token operator">=</span> list2
			list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>Next
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> list1<span class="token punctuation">.</span>Val <span class="token operator">&lt;=</span> list2<span class="token punctuation">.</span>Val <span class="token punctuation">{</span>
			p<span class="token punctuation">.</span>Next <span class="token operator">=</span> list1
			p <span class="token operator">=</span> list1
			list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>Next
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> head<span class="token punctuation">.</span>Next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h4><h4 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h4><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h4><h4 id="栈与队列" tabindex="-1"><a class="header-anchor" href="#栈与队列" aria-hidden="true">#</a> 栈与队列</h4><h4 id="数据结构设计" tabindex="-1"><a class="header-anchor" href="#数据结构设计" aria-hidden="true">#</a> 数据结构设计</h4><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><h4 id="贪心法" tabindex="-1"><a class="header-anchor" href="#贪心法" aria-hidden="true">#</a> 贪心法</h4><h4 id="回溯法" tabindex="-1"><a class="header-anchor" href="#回溯法" aria-hidden="true">#</a> 回溯法</h4><h4 id="dfs" tabindex="-1"><a class="header-anchor" href="#dfs" aria-hidden="true">#</a> DFS</h4><h4 id="bfs" tabindex="-1"><a class="header-anchor" href="#bfs" aria-hidden="true">#</a> BFS</h4><h4 id="动态规划法" tabindex="-1"><a class="header-anchor" href="#动态规划法" aria-hidden="true">#</a> 动态规划法</h4>`,12),w={href:"https://leetcode.cn/problems/maximum-subarray/description",target:"_blank",rel:"noopener noreferrer"},y=t('<h4 id="二分搜索" tabindex="-1"><a class="header-anchor" href="#二分搜索" aria-hidden="true">#</a> 二分搜索</h4><h4 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h4><h3 id="算法技巧" tabindex="-1"><a class="header-anchor" href="#算法技巧" aria-hidden="true">#</a> 算法技巧</h3><h4 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h4>',4),N={href:"https://leetcode.cn/problems/container-with-most-water/description",target:"_blank",rel:"noopener noreferrer"},L=n("h4",{id:"滑动窗口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#滑动窗口","aria-hidden":"true"},"#"),s(" 滑动窗口")],-1),V={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    record <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    res <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> right <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c <span class="token operator">:=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> record<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            record<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            record<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
        right <span class="token operator">++</span>
        <span class="token keyword">for</span> left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            record<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span>
            left <span class="token operator">++</span> 
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="前缀和与差分数组" tabindex="-1"><a class="header-anchor" href="#前缀和与差分数组" aria-hidden="true">#</a> 前缀和与差分数组</h4>`,2),E={href:"https://leetcode.cn/problems/subarray-sum-equals-k/description",target:"_blank",rel:"noopener noreferrer"};function S(F,I){const a=p("ExternalLinkIcon");return l(),i("div",null,[r,u,n("ul",null,[n("li",null,[n("a",d,[s("移除元素"),e(a)])])]),k,n("ul",null,[n("li",null,[n("a",v,[s("移动零"),e(a)])])]),h,n("ul",null,[n("li",null,[n("a",b,[s("合并区间"),e(a)])])]),m,n("ul",null,[n("li",null,[n("a",f,[s("反转链表"),e(a)])])]),_,n("ul",null,[n("li",null,[n("a",g,[s("合并两个有序链表"),e(a)])])]),x,n("ul",null,[n("li",null,[n("a",w,[s("最大子数组和"),e(a)])])]),y,n("ul",null,[n("li",null,[n("a",N,[s("盛最多水的容器"),e(a)])])]),L,n("ul",null,[n("li",null,[n("a",V,[s("无重复字符的最长子串"),e(a)])])]),B,n("ul",null,[n("li",null,[n("a",E,[s("和为 K 的子数组"),e(a)])])])])}const z=o(c,[["render",S],["__file","算法题.html.vue"]]);export{z as default};
